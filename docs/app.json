[{"name":"app.R","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(tableone)\r\n\r\n# Define UI for application\r\nui <- fluidPage(\r\n  titlePanel(\"App Data Wrangling with mpg Data\"),\r\n  mainPanel(\r\n    tabsetPanel(\r\n      tabPanel(\"Data Viewer\",\r\n               sidebarLayout(\r\n                 sidebarPanel(\r\n                   selectInput(\"columns\", \"Select Columns:\", choices = names(ggplot2::mpg), multiple = TRUE),\r\n                   numericInput(\"rows\", \"Number of Rows to Show:\", value = 10, min = 1),\r\n                   downloadButton(\"downloadRCode\", \"Download R Code\")\r\n                 ),\r\n                 mainPanel(\r\n                   h2(\"Data Viewer\"),\r\n                   tableOutput(\"data\"),\r\n                   h2(\"R Code\"),\r\n                   verbatimTextOutput(\"rcode\")\r\n                 )\r\n               )),\r\n      tabPanel(\"TableOne\",\r\n               h2(\"TableOne Summary\"),\r\n               selectInput(\"tableoneVar\", \"Choose Variables:\", choices = names(ggplot2::mpg), multiple = TRUE),\r\n               selectInput(\"tableoneStrata\", \"Choose Strata:\", choices = NULL, multiple = FALSE),\r\n               actionButton(\"generateTableOne\", \"Generate Table\"),\r\n               tableOutput(\"tableOneOutput\"),\r\n               h2(\"R Code for TableOne\"),\r\n               verbatimTextOutput(\"tableoneRCode\"))\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic\r\nserver <- function(input, output, session) {\r\n  \r\n  dataset <- ggplot2::mpg\r\n  \r\n  observe({\r\n    # Identify categorical variables for potential stratification\r\n    categorical_vars <- names(dataset)[sapply(dataset, function(x) is.factor(x) | is.character(x) | length(unique(x)) < 10)]\r\n    \r\n    # Update UI elements for stratification choices\r\n    updateSelectInput(session, \"tableoneStrata\", choices = categorical_vars, selected = NULL)\r\n  })\r\n  \r\n  output$data <- renderTable({\r\n    req(input$columns)  # ensure columns are selected\r\n    head(dataset[ , input$columns], input$rows)\r\n  })\r\n  \r\n  output$rcode <- renderText({\r\n    req(input$columns)  # ensure columns are selected\r\n    paste(\"data_subset <- mpg[ , c(\", paste(sQuote(input$columns), collapse=\", \"), \")]\\n\",\r\n          \"head(data_subset, \", input$rows, \")\", sep=\"\")\r\n  })\r\n  \r\n  observeEvent(input$generateTableOne, {\r\n    req(input$tableoneVar)  # Ensure variables are selected\r\n    \r\n    # Create TableOne object\r\n    tableOne <- CreateTableOne(vars = input$tableoneVar, strata = input$tableoneStrata, data = dataset, test = FALSE)\r\n    \r\n    # Convert the tableOne object to a matrix for rendering\r\n    output$tableOneOutput <- renderTable({\r\n      print(tableOne, text = TRUE)\r\n    }, rownames = TRUE)\r\n    \r\n    # Generate R code for creating the TableOne object\r\n    strata_part <- if(!is.null(input$tableoneStrata) && input$tableoneStrata != \"\") {\r\n      paste(\", strata = \\\"\", input$tableoneStrata, \"\\\"\", sep = \"\")\r\n    } else {\r\n      \"\"\r\n    }\r\n    output$tableoneRCode <- renderText({\r\n      req(input$tableoneVar)  # Ensure variables are selected\r\n      strata_part <- if(!is.null(input$tableoneStrata) && input$tableoneStrata != \"\") {\r\n        paste(\", strata = \\\"\", input$tableoneStrata, \"\\\"\", sep = \"\")\r\n      } else {\r\n        \"\"\r\n      }\r\n      paste(\"CreateTableOne(vars = c(\", paste(sQuote(input$tableoneVar), collapse = \", \"), \")\",\r\n            strata_part, \", data = mpg, test = FALSE)\")\r\n    })\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
